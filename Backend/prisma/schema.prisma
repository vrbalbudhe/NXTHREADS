generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  username   String       @unique
  email      String       @unique
  password   String
  fullname   String?
  gender     String?
  avatar     String?
  verified   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  posts      posts[]
  savedPosts savedPosts[]
  followers  Follows[]    @relation("following")
  following  Follows[]    @relation("follower")
  comment    comment[]
  Like       Like[]
  Unlike     Unlike[]
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       Int
  createdAt DateTime @default(now())
}

model posts {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  subtitle   String
  category   Category
  author     String
  content    String
  images     String[]
  createdAt  DateTime     @default(now())
  User       User?        @relation(fields: [userId], references: [id])
  userId     String?      @db.ObjectId
  savedPosts savedPosts[]
  comment    comment[]
  like       Like[]
  unlike     Unlike[]
  likes      Int?         @default(0)
  unlikes    Int?         @default(0)
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  post   posts  @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Unlike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  post   posts  @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model comment {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  post        posts  @relation(fields: [postId], references: [id])
  user        User   @relation(fields: [commentor], references: [id])
  postId      String @db.ObjectId
  commentor   String @db.ObjectId
  description String
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])
  followerId  String @db.ObjectId
  followingId String @db.ObjectId

  @@unique([followerId, followingId])
}

model savedPosts {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  post   posts   @relation(fields: [postId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
  postId String  @db.ObjectId
  userId String? @db.ObjectId

  @@unique([userId, postId])
}

enum Category {
  Technology
  Programming
  Web_Development
  Mobile_Development
  Software_Engineering
  Data_Science
  Cybersecurity
  Cloud_Computing
  Blockchain
  Digital_Marketing
  Entrepreneurship
  Design
  Gaming
  Health_and_Wellness
  Travel
  Food_and_Cooking
  Fashion
  Photography
  Sports
  Personal_Development
}
